{"version":3,"sources":["logo.svg","Child.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Child","title","App","React","useState","stateHello","setStateHello","isToggled","setIsToggled","networkData","setNetworkData","useEffect","axios","get","then","res","console","log","data","catch","appClassName","className","help","src","logo","alt","onClick","value","onChange","e","target","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,0LCe5BC,G,MAXD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAGb,OACI,6BACI,4BAAKA,M,iBCiEFC,EApEH,WAAM,MAGoBC,IAAMC,SAAS,IAHnC,mBAGTC,EAHS,KAGGC,EAHH,OAIkBH,IAAMC,UAAS,GAJjC,mBAITG,EAJS,KAIEC,EAJF,OAKsBL,IAAMC,SAAS,MALrC,mBAKTK,EALS,KAKIC,EALJ,KAQhBP,IAAMQ,WAAU,WACdC,IAAMC,IAAI,QACTC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,MAChBR,EAAeK,EAAIG,SAEpBC,MAAMH,QAAQC,OACf,IAEF,IAAIG,EAAe,MAKnB,OAJGb,IACDa,EAAe,YAIf,yBAAKC,UAAWD,GACd,4BAAQC,UAAU,cACfZ,GACC,6BACGA,EAAYR,MADf,IACuBQ,EAAYS,KADnC,IAC0CT,EAAYa,MAGxD,yBAAKC,IAAKC,IAAMH,UAAU,WAAWI,IAAI,SAEzC,2BACGpB,GAGH,4BAAQqB,QAAS,kBAAMlB,GAAcD,KAClCA,EAAY,KAAO,OAStB,2BACEoB,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAOvB,EAAcuB,EAAEC,OAAOH,UAI1C,kBAAC,EAAD,CAAO1B,MAAOI,IAEd,uBACEgB,UAAU,WACVU,KAAK,sBACLD,OAAO,SACPE,IAAI,uBAJN,kBChDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.492decc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","// Step 1: Import react\r\nimport React from 'react';\r\n\r\n// Step 2: Make child function\r\nconst Child = ({ title }) => { // 'title' is a prop; props go here, and are ready only\r\n\r\n    // Step 4: Must return valid jsx object\r\n    return (\r\n        <div>\r\n            <h1>{title}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Step 3: Export\r\nexport default Child;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Child from './Child';\r\nimport axios from 'axios';\r\n\r\nconst App = () => {\r\n  // 1 is state value\r\n  // 2 is setter\r\n  const [stateHello, setStateHello] = React.useState('');\r\n  const [isToggled, setIsToggled] = React.useState(false);\r\n  const [networkData, setNetworkData] = React.useState(null);\r\n  const hello = 'Hello world';\r\n\r\n  React.useEffect(() => {\r\n    axios.get('/api')\r\n    .then((res) => {\r\n      console.log(res.data);\r\n      setNetworkData(res.data);\r\n    })\r\n    .catch(console.log);\r\n  },[]);\r\n\r\n  let appClassName = \"App\";\r\n  if(isToggled){\r\n    appClassName = \"App dark\";\r\n  }\r\n\r\n  return (\r\n    <div className={appClassName}>\r\n      <header className=\"App-header\">\r\n        {networkData && (\r\n          <div>\r\n            {networkData.title} {networkData.data} {networkData.help}\r\n          </div>\r\n        )}\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n        <p>\r\n          {stateHello}\r\n        </p>\r\n\r\n        <button onClick={() => setIsToggled(!isToggled)}>\r\n          {isToggled ? 'ON' : 'OFF'}\r\n        </button>\r\n\r\n        {/* {isToggled && (\r\n          <div>\r\n            *toggled*\r\n          </div>\r\n        )} */}\r\n\r\n        <input\r\n          value={stateHello}\r\n          onChange={(e) => setStateHello(e.target.value)}\r\n        />\r\n        \r\n        {/* comment within jsx */}\r\n        <Child title={stateHello} />\r\n\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}